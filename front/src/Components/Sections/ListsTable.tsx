import { useState } from "react";
import 'Styles/components/Sections/ListTableStyles.scss';
import InfoCircle from "Components/Common/InfoCircle";

interface TableColumn<T> {
    header: string;
    render: (row: T) => JSX.Element;
    sortKey?: keyof T;
    text?: string;
}

interface TableProps<T> {
    data: T[];
    columns: TableColumn<T>[];
}

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º.
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–ª—é—á–∞–º –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ —Å –∏–∫–æ–Ω–∫–∞–º–∏.
 *
 * @component
 * @example
 * // –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
 * const columns = [
 *   { header: '–ò–º—è', render: (row) => row.name, sortKey: 'name', text: '–í —ç—Ç–æ–º —Å—Ç–æ–ª–±—Ü–µ –∏–º–µ–Ω–∞' },
 *   { header: '–í–æ–∑—Ä–∞—Å—Ç', render: (row) => row.age, sortKey: 'age' },
 * ];
 *
 * <ListTable
 *   data={[{ name: '–ò–≤–∞–Ω', age: 25 }, { name: '–ú–∞—Ä–∏—è', age: 30 }]}
 *   columns={columns}
 * />
 *
 * @param {Object} props - –°–≤–æ–π—Å—Ç–≤–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞.
 * @param {T[]} props.data - –ú–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —Ç–∞–±–ª–∏—Ü–µ.
 * @param {TableColumn<T>[]} props.columns - –°—Ç–æ–ª–±—Ü—ã —Ç–∞–±–ª–∏—Ü—ã, –∫–∞–∂–¥—ã–π —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º, —Ñ—É–Ω–∫—Ü–∏–µ–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏ —Ç–µ–∫—Å—Ç–∞.
 * @returns {JSX.Element} –¢–∞–±–ª–∏—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏.
 */

export default function ListTable<T>({ data, columns }: TableProps<T>): JSX.Element {
    const [sortConfig, setSortConfig] = useState<{ key: keyof T | null; direction: 'asc' | 'desc' | null }>({
        key: columns[0]?.sortKey || null, direction: 'asc',
    });

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    const sortedData = [...data].sort((a, b) => {
        if (!sortConfig.key) return 0;
    
        const getValue = (obj: T, key: keyof T) => {
            const keys = key.split('.'); // –î–ª—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
            return keys.reduce((acc, curr) => acc && acc[curr], obj);
        };
    
        const aValue = getValue(a, sortConfig.key);
        const bValue = getValue(b, sortConfig.key);
    
        if (aValue < bValue) return sortConfig.direction === 'asc' ? -1 : 1;
        if (aValue > bValue) return sortConfig.direction === 'asc' ? 1 : -1;
        return 0;
    });
    

    const handleSort = (key: keyof T) => {
        let direction: 'asc' | 'desc' = 'asc';
        if (sortConfig.key === key && sortConfig.direction === 'asc') {
            direction = 'desc';
        }
        setSortConfig({ key, direction });
    };

    return (
        <table className="UniversalListTable">
            <thead>
                <tr>
                    {columns.map((col, index) => (
                        <th 
                            key={index} 
                            onClick={() => col.sortKey && handleSort(col.sortKey)}
                            style={{ cursor: col.sortKey ? 'pointer' : 'default' }} // –î–µ–ª–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º, –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
                        >
                            {col.header}
                            {col.sortKey && sortConfig.key === col.sortKey && (
                                <span>
                                    {sortConfig.direction === 'asc' ? 'üîº' : 'üîΩ'}
                                </span>
                            )}
                            {col.text && <InfoCircle text={col.text} />}
                            {col.sortKey && sortConfig.key !== col.sortKey && (
                                <span> ‚Üï</span>
                            )}
                        </th>
                    ))}
                </tr>
            </thead>
            <tbody>
                {sortedData.map((row, rowIndex) => (
                    <tr key={rowIndex}>
                        {columns.map((col, colIndex) => (
                            <td key={colIndex}>{col.render(row)}</td>
                        ))}
                    </tr>
                ))}
            </tbody>
        </table>
    );
}
